Parameters:

  PeerName:
    Description: Name of the VPC Peer
    MaxLength: 255
    Type: String
  
  APIID:
    Description: ID of the API Gateway
    Type: String

  PeerVPCID:
    AllowedPattern: '^vpc-[0-9a-f]{17}$'
    ConstraintDescription: Must have a prefix of "vpc-". Followed by 17 characters (numbers, letters "a-f")
    Description: ID of the VPC with which you are creating the VPC peering connection
    Type: String
    
  REMOTEVPCCIDR:
    Description: CIDR Block of the remote VPC
    Type: String

  VPCENDPOINTID:
    Description: VPC Endpoint ID
    Type: String

  PeerRegion:
    Description: Region of the VPC Accepter (not required)
    Type: String

Resources:
  myVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  myInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: myInternetGateway
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway

  subnet:
    Type: 'AWS::EC2::Subnet'
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: '192.168.1.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs ]

  myRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: myVPC
    Properties:
      VpcId:  
        Ref: myVPC

  myRoute:
    Type: AWS::EC2::Route
    DependsOn: myRouteTable
    Properties:
      RouteTableId:
        Ref: myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myInternetGateway

  mySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: myRoute
    Properties:
      SubnetId:
        Ref: subnet
      RouteTableId:
        Ref: myRouteTable

  mySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow HTTPS traffic from the VPC'
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref REMOTEVPCCIDR
  
  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref myVPC
      PeerVpcId: !Ref PeerVPCID
      PeerOwnerId: !Ref "AWS::AccountId"
      PeerRegion: !Ref PeerRegion

  myRoutePeering:
    Type: AWS::EC2::Route
    DependsOn: VPCPeeringConnection
    Properties:
      RouteTableId:
        Ref: myRouteTable
      DestinationCidrBlock: !Ref REMOTEVPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  DNS: 
    Type: AWS::Route53::HostedZone
    DependsOn: myVPC
    Properties: 
      Name: !Join ['', [execute-api, ., !Ref 'PeerRegion', ., amazonaws, ., com]]
      VPCs: 
        - 
          VPCId: !Ref myVPC
          VPCRegion: !Sub ${AWS::Region}
       
  myDNSRecord:
    Type: AWS::Route53::RecordSet
    DependsOn: DNS
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', [!Ref 'APIID', ., execute-api, ., !Ref 'PeerRegion', ., amazonaws.com]]
      ResourceRecords:
      - !Join ['', [!Ref 'VPCENDPOINTID', ., execute-api, ., !Ref 'PeerRegion', ., vpce.amazonaws.com]]
      TTL: 900
      Type: CNAME

  myInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: subnet
    Properties: 
      ImageId: ami-0b31d93fb777b6ae6
      InstanceType: t2.micro
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: mySecurityGroup
        SubnetId: 
          Ref: subnet

Outputs:
  PeeringConnection:
    Description: The ID of the VPC Peering
    Value: !Ref VPCPeeringConnection
  VPCCidr:
    Description: Cidr Range of the VPC
    Value: 192.168.0.0/16